name: Run on web trigger 🕷

on: 
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Name of the app to run 🛤'     
        required: true
        default: 'hi_nutek'

env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}

jobs:
  request-run:
    name: Run container 🍟
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
      output3: ${{ steps.step3.outputs.test }}
    steps:
      
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: '${{ secrets.GITHUB }}'
      
      - name: Run
        run: |-
          today_is=$(date --iso-8601) \
          mkdir -p request/$today_is 2>/dev/null \
          cd request/$today_is \
          now=$(date --rfc-3339=ns) \
          touch $now

      #Alternative option - authentication via credentials json
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # Setup gcloud CLI
      #- name: Set up Cloud SDK
        #uses: google-github-actions/setup-gcloud@v0

      - name: Authorize Docker
        run: |-
          echo '${{ secrets.GCP_CREDENTIALS }}' | pass.json \
          cat pass.json | \
            docker login -u _json_key --password-stdin https://us-east1-docker.pkg.dev 
         # VERSION=2.0.0
          #OS=linux \ # or "darwin" for OSX, "windows" for Windows.
          #ARCH=amd64 \ # or "386" for 32-bit OSs, "arm64" for ARM 64.
          #curl -fsSL "https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${VERSION}/docker-credential-gcr_${OS}_${ARCH}-${VERSION}.tar.gz" \
            #| tar xz --to-stdout ./docker-credential-gcr \
            #> /usr/local/bin/docker-credential-gcr && chmod +x /usr/local/bin/docker-credential-gcr
         # docker-credential-gcr configure-docker --token-source ${{ secrets.GCP_CREDENTIALS }}

      - name: Run app 😷  
        run: |-
          result=$(docker run --rm -p 8080:8080 ${{ github.event.inputs.app_name }})

      - id: step1
        run: echo "::set-output name=test::$today_is"
      - id: step2
        run: echo "::set-output name=test::$now"
      - id: step3
        run: echo "::set-output name=test::$result"
    # save latest version to github
      - name: Commit new version
        uses: "EndBug/add-and-commit@v8"
        with:
          add: "request/$today_is/$now"
          author_name: "Phoenix Journey bot"
          message: "Commit app request from Phoenix Journey [skip ci]"
          author_email: "github-bot@phoenixjourney.com"

  save-result:
    name: Save result 🎥
    runs-on: self-hosted
    needs: request-run

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: '${{ secrets.GITHUB }}'

      - name: Add new app run
        run: |-
          mkdir -p result/$today_is 2>/dev/null \
          cd result/$today_is \
          touch ${{ needs.request-run.outputs.output2 }} \
          ${{ needs.request-run.outputs.output3 }} >> \
          ${{ needs.request-run.outputs.output2 }}

    # save latest version to github
      - name: Commit result        
        uses: "EndBug/add-and-commit@v8"
        with:
          add: "result/${{ needs.request-run.outputs.output1 }}/${{ needs.request-run.outputs.output2 }}"
          author_name: "Phoenix Journey bot"
          message: "Commit app result from Phoenix Journey [skip ci]"
          author_email: "github-bot@phoenixjourney.com"
